```markdown
# .copilot-instructions.md
**Target model:** Claude Sonnet 4  
**Project goal:** **MVP Tally.so n8n Community Node** — fast launch, clean enough for community extension, minimal but functional feature set.

---

## 0. Overview

We are building an **n8n community node** that lets users interact with Tally.so via its **GraphQL API**. Focus on the *core read + basic webhook* flows people actually need in automations:

**MVP Scope**

| Resource    | Operations (MVP)     | Purpose |
|-------------|----------------------|---------|
| **Form**    | `getAll`, `get`      | Discover and inspect forms. |
| **Submission** | `getAll`, `get`   | Pull response data for downstream automations. |
| **Webhook** | `create`, `delete`   | Automate submission triggers into n8n. |

**API Base:** `POST https://api.tally.so/graphql`  
**Auth:** Static Bearer token (user-provided API key).  
**Tests:** Not required for MVP (keep interfaces stable enough to add later).  

---

## 1. Staged Implementation Roadmap (Incremental Releases)

Each stage should build cleanly; produce a releasable tag at end of stage. Favor small, working increments so community users can try early.

---

### Stage 1 – Repo & Node Skeleton

**Goals:** Project scaffolding, credentials, API helper, empty resource/operation UI.

**Tasks**
1. Scaffold a community node repo using `n8n-node-dev` (or copy minimal template).
2. Add MIT `LICENSE`, `README.md`, `package.json`, build scripts, linter + prettier config.
3. Create credentials file: `TallySo.credentials.ts`
   - Name: `tallySoApi`
   - Field: `apiToken` (type=string, required).
   - DisplayName: "Tally.so API Token".
4. Create `TallySo.node.ts`:
   - `displayName: 'Tally.so'`
   - `name: 'tallySo'`
   - `icon: 'file:tally.svg'` (placeholder; include simple SVG).
   - `credentials: [{ name: 'tallySoApi', required: true }]`
   - Resources: `form`, `submission`, `webhook` (enum).
   - Operations placeholder; return stub data until later stages.
5. Shared request helper: `makeTallyRequest.ts`
   - Exports `async tallyApiRequest(this: IExecuteFunctions | ILoadOptionsFunctions, query: string, variables?: IDataObject): Promise<any>`
   - Inject `Authorization: Bearer {{apiToken}}`
   - POST JSON `{ query, variables }`
   - Throw `NodeApiError` on non-2xx or GraphQL `errors[]`.

**Deliverable Tag:** `v0.0.1-internal` (not published; sanity check).

---

### Stage 2 – Form Resource (Read-only)

**Goals:** Enable users to pull their form list and inspect a single form. First public preview.

**Operations**
- **form → getAll**
  - GraphQL:
        query {
          forms {
            id
            name
            createdAt
            updatedAt
            publishedAt
          }
        }
  - Output: One item per form (n8n items array).
- **form → get**
  - Inputs: `formId` (string, required; dropdown populated from `getAll` via `loadOptions`).
  - GraphQL:
        query ($id: ID!) {
          form(id: $id) {
            id
            name
            createdAt
            updatedAt
            publishedAt
            url
            fields {
              id
              label
              type
              required
            }
          }
        }
  - Output: Single n8n item representing the form.

**Additional Tasks**
- Implement `loadOptions` method to populate Form selector (`forms` query).
- Add minimal README usage: connect credentials, pull form list.
- Add `npm` prepublish build and local install instructions.

**Deliverable Tag:** `v0.1.0` (alpha preview).

---

### Stage 3 – Submission Resource

**Goals:** Fetch submission data for automation flows. Include pagination + basic answer flattening helper.

**Operations**
- **submission → getAll**
  - Inputs:
    - `formId` (required; loadOptions).
    - `limit` (int; default 100; max 1000? keep conservative).
    - `cursor` (string; optional; for pagination).
    - `returnRaw` (boolean; default false; if true, output raw GraphQL structure; else flattened).
  - GraphQL (example minimal form; adjust fields as discovered):
        query ($id: ID!, $after: String, $first: Int) {
          form(id: $id) {
            submissions(first: $first, after: $after) {
              pageInfo { endCursor hasNextPage }
              nodes {
                id
                createdAt
                answers {
                  fieldId
                  question
                  value
                  valueType
                }
              }
            }
          }
        }
  - Map pageInfo → n8n metadata item (optional additional item or binary metadata).
  - Flattening strategy (if `returnRaw`=false):
    - Build an object: `{ submissionId, createdAt, answers: {...}, raw: <optional> }`
    - `answers` object keys = sanitized field labels or fieldId fallback.
    - Preserve arrays for multi-select.
- **submission → get**
  - Inputs: `formId`, `submissionId`
  - Use same query with `submission(id:)` if available; else filter `nodes` client-side (inefficient but acceptable MVP if API lacks direct fetch).
  - Output: Single item, same flattening.

**Helper:** `flattenSubmissionAnswers(submission, form?)` (form optional to map labels).

**Docs Update**
- Show how to loop `hasNextPage` with n8n `IF` + `Set` + `HTTP` style or node self-paging param `returnAll`.
- Provide JSON sample transformation to Airtable/Sheets.

**Deliverable Tag:** `v0.2.0` (beta).

---

### Stage 4 – Webhook Resource

**Goals:** Let users register/delete a Tally webhook pointing to an n8n Webhook URL so submissions push in real-time.

**Pre-Req:** User must first create an n8n Webhook node and copy the URL (prod URL, not test unless they understand testing mode).

**Operations**
- **webhook → create**
  - Inputs:
    - `formId` (required)
    - `destinationUrl` (string; required; user pastes n8n webhook URL)
    - Optional: `secret` (string; if Tally supports signing — placeholder; otherwise ignore)
  - GraphQL:
        mutation ($formId: ID!, $dest: String!) {
          createWebhook(input:{formId:$formId,destination:$dest}) {
            webhook { id destination createdAt }
          }
        }
  - Return created webhook object.
- **webhook → delete**
  - Inputs: `formId` (optional if API just needs webhookId), `webhookId` (required)
  - GraphQL:
        mutation ($id: ID!) {
          deleteWebhook(id: $id) { success }
        }
  - Return `{success:true}`.

**(Optional Nice-to-Have)** `webhook → getAll` if API exposes (skip if undocumented; not required for MVP).

**Docs Update**
- Screenshot flow: Tally → Integrations → Custom Webhook → paste from n8n.
- Explain one common gotcha: Use **POST** and production URL in n8n when enabling external calls.

**Deliverable Tag:** `v0.3.0` (RC).

---

### Stage 5 – Polish, Validation, Launch

**Goals:** Quality pass before public listing.

**Tasks**
1. **Descriptions** — Every field in UI gets a short, action-oriented description (<= 80 chars where possible).
2. **Error mapping** — Friendly messages:
   - Invalid token
   - Form not found
   - Rate limit (advise retry/backoff)
3. **Rate limit header** (if exposed): expose as node output under `_meta.rateLimit`.
4. **Credential test** — Add `test` function in credentials to run a trivial `forms` query.
5. **Changelog** — Add `CHANGELOG.md`.
6. **Version bump** — `v1.0.0`.
7. Publish to npm & submit to n8n Community Nodes index.

---

## 2. File Layout (Suggested)

```

packages/
n8n-nodes-tallyso/
package.json
tsconfig.json
.eslintrc.js
.prettierrc
LICENSE
README.md
CHANGELOG.md
credentials/
TallySo.credentials.ts
nodes/
TallySo/
TallySo.node.ts
makeTallyRequest.ts
transforms.ts          # flatten helpers
graphql/
formGetAll.gql.ts
formGet.gql.ts
submissionsGetAll.gql.ts
submissionGet.gql.ts
webhookCreate.gql.ts
webhookDelete.gql.ts
icons/
tally.svg
test/
workflows/
sample-form-read.json
sample-submission-pull.json

````

> NOTE: GraphQL query files may be inline strings; separate files improve readability but increase overhead. For MVP, inline constants in module-scoped `const` variables is fine. Choose whichever is fastest to maintain.

---

## 3. Coding Conventions & Best Practices

### 3.1 Naming

| Thing | Style | Example | Notes |
|-------|-------|---------|-------|
| Variables | `camelCase` | `submissionCursor` | Keep short, descriptive. |
| Consts | `UPPER_SNAKE_CASE` | `TALLY_API_URL` | Module-scope only. |
| Functions | `verbCamelCase()` | `fetchAllForms()` | Start w/ action verb. |
| Classes/Enums | `PascalCase` | `TallyFormFields` | Rare in MVP; keep lean. |
| Interfaces/Types | `PascalCase` | `TallySubmissionNode` | Exported types. |
| Props in node description | snake-ish keys per n8n patterns | `displayName`, `name`, etc. |
| GraphQL var objects | `gqlFormId` (internal) or inline | Keep local to call site. |

### 3.2 File Size Discipline
- ≤ 200 LOC per file; split helpers early.
- Node description arrays get long — isolate GraphQL + helper logic in separate imports.

### 3.3 Comments
- Use **JSDoc** for exported functions.
- Explain *why*, not *what*.
- Link to Tally docs section if referencing a field quirk.

### 3.4 Error Handling
- Wrap API call in try/catch.
- On GraphQL `errors`, throw `new NodeApiError(this.getNode(), { message: errors[0].message, ... })`.
- Include `statusCode` when available.

### 3.5 Output Shape (n8n Items)
- Always return an *array* of items.
- For single-item operations, wrap single object in array.
- Use `_raw` field to preserve GraphQL response for power users.
- Flattened answers: store under `answers` or root keys (configurable later; MVP = `answers` object).

### 3.6 Input Validation
- Guard required params.
- Trim strings.
- Fail fast if missing token.

---

## 4. Credential Spec

Minimal credential file:

```ts
// TallySo.credentials.ts
import { ICredentialType, INodeProperties } from 'n8n-workflow';

export class TallySoApi implements ICredentialType {
	name = 'tallySoApi';
	displayName = 'Tally.so API Token';
	documentationUrl = 'https://tally.so/help/integrations'; // placeholder
	properties: INodeProperties[] = [
		{
			displayName: 'API Token',
			name: 'apiToken',
			type: 'string',
			typeOptions: { password: true },
			default: '',
			required: true,
			description: 'Your Tally.so personal API token (Bearer).',
		},
	];
	// Optional: add test request in Stage 5 polish.
}
````

---

## 5. Shared Request Helper

*Pseudocode (final version lives in `makeTallyRequest.ts`):*

```ts
import type {
	IExecuteFunctions,
	ILoadOptionsFunctions,
	IHookFunctions,
} from 'n8n-workflow';
import { NodeApiError } from 'n8n-workflow';
import type { OptionsWithUri } from 'request';

const TALLY_API_URL = 'https://api.tally.so/graphql';

export async function tallyApiRequest(
	this: IExecuteFunctions | ILoadOptionsFunctions | IHookFunctions,
	query: string,
	variables: Record<string, unknown> = {},
) {
	const credentials = await this.getCredentials('tallySoApi');
	const options: OptionsWithUri = {
		method: 'POST',
		uri: TALLY_API_URL,
		json: true,
		body: { query, variables },
		headers: {
			Authorization: `Bearer ${credentials.apiToken}`,
		},
	};

	try {
		const response = await this.helpers.request!(options);
		if (response.errors?.length) {
			throw new NodeApiError(this.getNode(), response.errors);
		}
		return response.data;
	} catch (error) {
		throw new NodeApiError(this.getNode(), error);
	}
}
```

---

## 6. Submission Flatten Helper (Optional but Recommended)

```ts
export function flattenSubmission(sub: any, form?: any) {
	const flattened: Record<string, any> = {
		submissionId: sub.id,
		createdAt: sub.createdAt,
		answers: {},
		_raw: sub, // keep raw
	};

	const fieldMap =
		form?.fields?.reduce((acc: any, f: any) => ((acc[f.id] = f.label || f.id), acc), {}) || {};

	for (const ans of sub.answers || []) {
		const key =
			fieldMap[ans.fieldId] ??
			ans.question ??
			ans.fieldId ??
			`field_${Object.keys(flattened.answers).length}`;
		flattened.answers[key] = ans.value;
	}
	return flattened;
}
```

---

## 7. README Content Checklist (Fill In During Build)

* What this node does (forms, submissions, webhooks).
* How to get your Tally API token (free tier OK).
* How to install community node (`n8n-nodes-tallyso`).
* Example workflow: Pull submissions → Google Sheets.
* Example workflow: Register webhook → Slack notification.
* Known limitations (rate limits, missing analytics, no form create).
* Changelog / versioning.

---

## 8. Release Milestones

| Version | Stage | Notes                                        |
| ------- | ----- | -------------------------------------------- |
| v0.0.1  | 1     | Skeleton; internal sanity check.             |
| v0.1.0  | 2     | Forms read; first alpha.                     |
| v0.2.0  | 3     | Submissions read; beta usable.               |
| v0.3.0  | 4     | Webhooks create/delete; RC.                  |
| v1.0.0  | 5     | Polish, docs, release to community registry. |

---

## 9. Stretch Ideas (Not MVP)

* `createForm`, `updateForm`, `duplicateForm`.
* Pull form analytics (views, completion rate).
* Auto-mapping to known CRMs (Airtable, HubSpot).
* Retry/backoff for 429 rate limits.
* Streaming large exports to binary file.

---

## 10. Quick Execution Checklist

* [ ] Repo scaffolded
* [ ] Credential implemented
* [ ] API helper working
* [ ] Form getAll/get
* [ ] Submission getAll/get + flatten
* [ ] Webhook create/delete
* [ ] Basic README
* [ ] Version bump + publish

---

### Done Definition

You are **DONE** when:

* Node builds (`npm run build`).
* Appears in n8n under “Community Nodes”.
* Can authenticate with a free-tier Tally API key.
* Can list forms, pull submissions, and register a webhook that successfully POSTs into an n8n Webhook node.
* README lets a new user succeed without reading code.

---

**Let’s ship.**

```
::contentReference[oaicite:0]{index=0}
```

B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
B
A
A
A

